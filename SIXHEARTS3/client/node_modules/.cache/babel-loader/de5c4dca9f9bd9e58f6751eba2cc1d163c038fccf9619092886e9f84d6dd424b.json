{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\S\\\\Desktop\\\\SIXHEARTS2\\\\frontend\\\\src\\\\Pages\\\\Product.jsx\",\n  _s = $RefreshSig$();\n// Pages/Product.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Product = () => {\n  _s();\n  // Aquí deberías tener una lógica para obtener una lista de productos\n  const [products, setProducts] = useState([]);\n\n  // Simula la carga de la lista de productos usando useEffect\n  useEffect(() => {\n    // Aquí deberías hacer una solicitud a tu API o usar datos locales para obtener la lista de productos\n    // Por ahora, simplemente simularemos una solicitud con un array de datos\n    const fetchProducts = async () => {\n      // Simulamos una solicitud a una API para obtener la lista de productos\n      const response = await fetch('https://api.example.com/products');\n      const data = await response.json();\n      // Actualiza el estado con la lista de productos\n      setProducts(data);\n    };\n    fetchProducts(); // Llamada a la función de simulación de solicitud de productos\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Lista de Productos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: products.map(product => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/product/${product.id}`,\n          children: product.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this)\n      }, product.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Product, \"f86L6rLANGURv6GE6gupp7+oOp4=\");\n_c = Product;\nexport default Product;\nvar _c;\n$RefreshReg$(_c, \"Product\");","map":{"version":3,"names":["React","useState","useEffect","Link","jsxDEV","_jsxDEV","Product","_s","products","setProducts","fetchProducts","response","fetch","data","json","children","fileName","_jsxFileName","lineNumber","columnNumber","map","product","to","id","name","_c","$RefreshReg$"],"sources":["C:/Users/S/Desktop/SIXHEARTS2/frontend/src/Pages/Product.jsx"],"sourcesContent":["// Pages/Product.jsx\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Product = () => {\r\n  // Aquí deberías tener una lógica para obtener una lista de productos\r\n  const [products, setProducts] = useState([]);\r\n\r\n  // Simula la carga de la lista de productos usando useEffect\r\n  useEffect(() => {\r\n    // Aquí deberías hacer una solicitud a tu API o usar datos locales para obtener la lista de productos\r\n    // Por ahora, simplemente simularemos una solicitud con un array de datos\r\n    const fetchProducts = async () => {\r\n      // Simulamos una solicitud a una API para obtener la lista de productos\r\n      const response = await fetch('https://api.example.com/products');\r\n      const data = await response.json();\r\n      // Actualiza el estado con la lista de productos\r\n      setProducts(data);\r\n    };\r\n\r\n    fetchProducts(); // Llamada a la función de simulación de solicitud de productos\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Lista de Productos</h2>\r\n      <ul>\r\n        {products.map(product => (\r\n          <li key={product.id}>\r\n            {/* Enlaces a las páginas de detalles del producto */}\r\n            <Link to={`/product/${product.id}`}>{product.name}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACAC,SAAS,CAAC,MAAM;IACd;IACA;IACA,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;MAChE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClC;MACAL,WAAW,CAACI,IAAI,CAAC;IACnB,CAAC;IAEDH,aAAa,CAAC,CAAC,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAU,QAAA,gBACEV,OAAA;MAAAU,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3Bd,OAAA;MAAAU,QAAA,EACGP,QAAQ,CAACY,GAAG,CAACC,OAAO,iBACnBhB,OAAA;QAAAU,QAAA,eAEEV,OAAA,CAACF,IAAI;UAACmB,EAAE,EAAG,YAAWD,OAAO,CAACE,EAAG,EAAE;UAAAR,QAAA,EAAEM,OAAO,CAACG;QAAI;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO;MAAC,GAFlDE,OAAO,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGf,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACZ,EAAA,CAhCID,OAAO;AAAAmB,EAAA,GAAPnB,OAAO;AAkCb,eAAeA,OAAO;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}